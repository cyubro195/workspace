
스프링의 지향점

- 결합도는 낮추고, 응집도는 높인다 => 좋은 프로그램이다. (유지보수하기 좋음)
- 결합도를 낮추기 위해서 IOC, DI 개념을 도입 ( 그게뭔데?)
- 응집도를 높이기 위해서 AOP 개념을 도입 ( 그게뭔데 ㅅ? )


[IOC, DI 개념]

IOC(Inversion of control) : 제어의 역전 ( 객체를 생성할때 쓰는 개념)
- 객체를 생성하는 주체가 개발자에서 스프링으로 변경됨을 이야기함.


* Q : 그럼 개발자가 객체생성을 하지않고 스프링이 객체를 생성해준다면
        스프링은 어떤방식으로 객체를 생성해주는 것인가?

   A : DI(Dependency Injection): 의존성 주입
- IOC를 통해 자동으로 생성된 객체를 개발자가 사용할 때 진행되는 방식..

 
스프링이 자동으로 객체를 생성하도록 코드를 작성하는 방법!

1) 객체를 자동으로 생성하고 싶은 클래스는 반드시 프로젝트의 기본 패키지 안에 생성한다!
   (기본패키지 안에 있다고 해서 객체가 자동으로 생성 되지않는다XXXXX )

2) 클래스(Class) 위에 어노테이션(Annotation)을 사용해서 클래스의 객체를
    프로젝트가 시작되자마자 자동으로 생성한다.
    클래스 위에 선언하여 객체를 생성해주는 어노테이션(Annotation)
		    
 	@Component
	@Controller   @Service   @Repository > 객체를 만들겠습니다, 개발자가 느낄수있도록 변경해노...뭐???


[ 셀프추가설명 ]
어노테이션이란? (Annotation)
어노테이션은 다른 프로그램에게 유용한 정보를 제공하기 위해 사용되는 것으로 주석과 같은 의미를 가진다.

-어노테이션의 역할-

컴파일러에게 문법 에러를 체크하도록 정보를 제공한다.
프로그램을 빌드할 때 코드를 자동으로 생성할 수 있도록 정보를 제공한다.
런타임에 특정 기능을 실행하도록 정보를 제공한다.

어노테이션은 @를 사용하여 작성하며, 해당 타겟에 대한 동작을 수행하는 프로그램 외에는 다른 프로그램에게 영향을 주지 않는다.
 
어노테이션의 종류
어노테이션은 크게 세 가지로 구분된다. 
자바에서 기본적으로 제공하는 표준 어노테이션
어노테이션을 정의하는 데 사용되는 메타 어노테이션
마지막으로 사용자 어노테이션이 있다.
 
 
표준 어노테이션
자바에서 기본적으로 제공하는 어노테이션이다.
@Override
컴파일러에게 메서드를 오버라이딩하는 것이라고 알린다.
 
@Deprecated
앞으로 사용하지 않을 대상임을 알린다.
 
@FunctionalInterface
함수형 인터페이스라는 것을 알린다.
 
@SuppressWarning
컴파일러가 경고 메시지를 나타내지 않는다.
 
@SafeVaragrs
제네릭과 같은 가변 인자의 매개변수를 사용할 때의 경고를 나타내지 않는다.
 
메타 어노테이션
어노테이션에 붙이는 어노테이션으로, 어노테이션을 정의하는 데 사용한다.
 
@Target
어노테이션을 정의할 때 적용 대상을 지정하는 데 사용한다.
 
@Documented
어노테이션 정보를 javadoc으로 작성된 문서에 포함시킨다.
 
@Inherited
어노테이션이 하위 클래스에 상속되도록 한다.
 
@Retention
어노테이션이 유지되는 기간을 정하기 위해 사용한다.
 
@Repeatable
어노테이션을 반복해서 적용할 수 있도록 한다.
 
사용자 정의 어노테이션
사용자가 직접 정의하여 사용하는 어노테이션이다.

그럼, 스프링이 자동으로 생성해준 객체를 우리가 어캐써야함??????

 - 어노테이션을 사용해야 스프링이 자동 생성해준 객체를 우리가 사용할 수 있다.
 - 아래 두 어노테이션(Annotation)은 생성된 객체를 사용할 때 사용하며, 맴버변수 위에 작성한다.

@Autowired - 생성된 객체의 자료형을 비교하여 생성된 객체를 사용함.
@Resource - 생성된 객체의 이름을 비교하여 생성된 객체를 사용함.

- 객체 생성과 생성된 객체를 사용하는 예시 -

@Component
class Aaa{   } -> Aaa aaa = new Aaa();

@Service("b")
class Bbb{   } -> Bbb b = new Bbb();

class Ccc {  
  	@Autowired
	private Aaa a; //객체선언  --> Aaa a = aaa;  ( 자료형으로 판단해서 들어오는겅)


 } 


* 객체 생성과 생성된 객체르 사용하는 예시 2222222222

class Animall{ }

@Component
class Dog extends Animal{ } -> Dog dog = new Dong();

@Component
class Cat extends Animall { } ->Cat cat = new Cat();

class AnimallHouse{
	@Resource(name="dog") 
	private Animal a;
	
	@Autowired
	private Dog d;

}

[객체 생성과 생성된 객체르 사용하는 예시 3]

	interface BoardService{ } > 인터페이스는 객체 못만들어욕~

	@Service("boardService")
	class BoardServiceImpl implements BordService{ }
		-> BoardServiceImpl boardService = new BoardServiceImpl();
	@Service
	class MyBoard implements BordService{ }
		-> MyBoard myboard = new MyBoard();
	@Component
	class SqlSession{ }
		-> SqlSession sqlSession = new SqlSession();

	class BoardController{
	
	@Resource(name = "boardService") or ("myBoard") 도 가능 
	private BoardService boardService;
	@Autowired
	private SqlSession sqlSession;



}





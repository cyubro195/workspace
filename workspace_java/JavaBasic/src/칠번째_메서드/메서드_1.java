package 칠번째_메서드;


// 잘써야대ㅐㅐ 파이팅

// 메소드(Method) == 함수(Function)
// 메소드는 반복해서 실행하는 코드를 미리 하나의 기능으로 정의
// 메소드의 사용은 크게 메소드 정의부분과 메소드 호출부분으로 나누어짐!!
// 메소드를 사용하려면 반드시 메소드 정의 후 호출을 확인!

// 메소드의 정의는 클래스 안, 다른 메소드 밖에서 선언한다.
// 메소드는 필요한 만큼 무한정 정의 할 수 있음
// 메소드명은 중복 불가(대소문자 구분함!)
// 메소드 명 항상 소문자로 작명한다******

// 메소드의 호출은 메소드의 정의 안에서 호출
// 메소드를 호출할 때는 정의한 메소드명을 반드시 일치시켜야 함.
// 메소드를 호출할 때는 정의한 메소드의 매개변수 정보를 일치시켜야 함.

// 매개변수(parameters) 정보 : 매개변수 자료형, 매개변수의 갯수
// 매개변수(parameters) 역할 : 메서드의 기능을 구현할 때 필요한 데이터를 외부로 받아오는 것.

// 리턴타입 : 메서드의 실행결과 값을 외부로 전달할 때 사용.
// 리턴타입은 메서드의 실행결과 외부로 전달될 데이터 타입과 일치시켜야 함!! > 정수를 내보낼때는 void를 int로 빼는 것 처럼
// static *void* -> static int[]  < 이렇게 들ㅇ거ㅏㄹ수잇음
// 실행결과 리턴할 데이터가 없을 때는 리턴타입에 void를 사용!!!
// 메서드의 실행결과 리턴 데이터가 있다면 메서드 내부에서 'return'키워드를 사용한다.
// 'return' 키워드는 항상 메서드의 마!지!막에 딱 한 번만 실행 가능!!





// 메소드의 정의 문법
/*
    접근제한자 리턴타입 메소드명(매개변수 정보){

    }

    public static void 메소드명(){

    }

*/


public class 메서드_1 {
    //메소드의 정의
    public static  void hello(){
        System.out.println("hello~ ");
    }
    public static void main(String[] args) {
    // 메소드의 호출
        hello();









    }
}
